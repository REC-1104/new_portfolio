{"ast":null,"code":"import _slicedToArray from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"debug\", \"children\", \"frames\", \"ior\", \"color\", \"causticsOnly\", \"backside\", \"backsideIOR\", \"worldRadius\", \"intensity\", \"resolution\", \"lightSource\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { useHelper } from './useHelper.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { Edges } from './Edges.js';\nimport { FullScreenQuad } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\nfunction createNormalMaterial() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : THREE.FrontSide;\n  var viewMatrix = {\n    value: new THREE.Matrix4()\n  };\n  return Object.assign(new THREE.MeshNormalMaterial({\n    side: side\n  }), {\n    viewMatrix: viewMatrix,\n    onBeforeCompile: function onBeforeCompile(shader) {\n      shader.uniforms.viewMatrix = viewMatrix;\n      shader.fragmentShader = \"vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n         }\\n\" + shader.fragmentShader.replace('#include <normal_fragment_maps>', \"#include <normal_fragment_maps>\\n           normal = inverseTransformDirection( normal, viewMatrix );\\n\");\n    }\n  });\n}\nvar CausticsProjectionMaterial = /*@__PURE__*/shaderMaterial({\n  causticsTexture: null,\n  causticsTextureB: null,\n  color: /*@__PURE__*/new THREE.Color(),\n  lightProjMatrix: /*@__PURE__*/new THREE.Matrix4(),\n  lightViewMatrix: /*@__PURE__*/new THREE.Matrix4()\n}, \"varying vec3 vWorldPosition;   \\n   void main() {\\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\\n     vec4 worldPosition = modelMatrix * vec4(position, 1.);\\n     vWorldPosition = worldPosition.xyz;\\n   }\", \"varying vec3 vWorldPosition;\\n  uniform vec3 color;\\n  uniform sampler2D causticsTexture; \\n  uniform sampler2D causticsTextureB; \\n  uniform mat4 lightProjMatrix;\\n  uniform mat4 lightViewMatrix;\\n   void main() {\\n    // Apply caustics  \\n    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);\\n    lightSpacePos.xyz /= lightSpacePos.w;\\n    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; \\n    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;\\n    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;\\n    gl_FragColor = vec4((front + back) * color, 1.0);\\n    #include <tonemapping_fragment>\\n    #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n   }\"));\nvar CausticsMaterial = /*@__PURE__*/shaderMaterial({\n  cameraMatrixWorld: /*@__PURE__*/new THREE.Matrix4(),\n  cameraProjectionMatrixInv: /*@__PURE__*/new THREE.Matrix4(),\n  normalTexture: null,\n  depthTexture: null,\n  lightDir: /*@__PURE__*/new THREE.Vector3(0, 1, 0),\n  lightPlaneNormal: /*@__PURE__*/new THREE.Vector3(0, 1, 0),\n  lightPlaneConstant: 0,\n  near: 0.1,\n  far: 100,\n  modelMatrix: /*@__PURE__*/new THREE.Matrix4(),\n  worldRadius: 1 / 40,\n  ior: 1.1,\n  bounces: 0,\n  resolution: 1024,\n  size: 10,\n  intensity: 0.5\n}, /* glsl */\"\\n  varying vec2 vUv;\\n  void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n  }\", /* glsl */\"  \\n  uniform mat4 cameraMatrixWorld;\\n  uniform mat4 cameraProjectionMatrixInv;\\n  uniform vec3 lightDir;\\n  uniform vec3 lightPlaneNormal;\\n  uniform float lightPlaneConstant;\\n  uniform float near;\\n  uniform float far;\\n  uniform float time;\\n  uniform float worldRadius;\\n  uniform float resolution;\\n  uniform float size;\\n  uniform float intensity;\\n  uniform float ior;\\n  precision highp isampler2D;\\n  precision highp usampler2D;\\n  uniform sampler2D normalTexture;\\n  uniform sampler2D depthTexture;\\n  uniform float bounces;\\n  varying vec2 vUv;\\n  vec3 WorldPosFromDepth(float depth, vec2 coord) {\\n    float z = depth * 2.0 - 1.0;\\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\\n    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;\\n    // Perspective division\\n    viewSpacePosition /= viewSpacePosition.w;\\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\\n    return worldSpacePosition.xyz;\\n  }                  \\n  float sdPlane( vec3 p, vec3 n, float h ) {\\n    // n must be normalized\\n    return dot(p,n) + h;\\n  }\\n  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {\\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\\n  }\\n  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {\\n    rayOrigin = ro;\\n    rayDirection = rd;\\n    rayDirection = refract(rayDirection, normal, 1.0 / ior);\\n    rayOrigin = pos + rayDirection * 0.1;\\n    return rayDirection;\\n  }\\n  void main() {\\n    // Each sample consists of random offset in the x and y direction\\n    float caustic = 0.0;\\n    float causticTexelSize = (1.0 / resolution) * size * 2.0;\\n    float texelsNeeded = worldRadius / causticTexelSize;\\n    float sampleRadius = texelsNeeded / resolution;\\n    float sum = 0.0;\\n    if (texture2D(depthTexture, vUv).x == 1.0) {\\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n      return;\\n    }\\n    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 uv1 = vUv + offset1 * sampleRadius;\\n    vec2 uv2 = vUv + offset2 * sampleRadius;\\n    vec2 uv3 = vUv + offset3 * sampleRadius;\\n    vec2 uv4 = vUv + offset4 * sampleRadius;\\n    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;\\n    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;\\n    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;\\n    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;\\n    float depth1 = texture2D(depthTexture, uv1, -10.0).x;\\n    float depth2 = texture2D(depthTexture, uv2, -10.0).x;\\n    float depth3 = texture2D(depthTexture, uv3, -10.0).x;\\n    float depth4 = texture2D(depthTexture, uv4, -10.0).x;\\n    // Sanity check the depths\\n    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {\\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n      return;\\n    }\\n    vec3 pos1 = WorldPosFromDepth(depth1, uv1);\\n    vec3 pos2 = WorldPosFromDepth(depth2, uv2);\\n    vec3 pos3 = WorldPosFromDepth(depth3, uv3);\\n    vec3 pos4 = WorldPosFromDepth(depth4, uv4);\\n    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);\\n    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);\\n    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);\\n    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);\\n    vec3 endPos1, endPos2, endPos3, endPos4;\\n    vec3 endDir1, endDir2, endDir3, endDir4;\\n    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);\\n    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);\\n    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);\\n    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);\\n    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));\\n    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));\\n    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));\\n    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));\\n    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));\\n    vec3 finalPos1 = endPos1 + endDir1 * t1;\\n    vec3 finalPos2 = endPos2 + endDir2 * t2;\\n    vec3 finalPos3 = endPos3 + endDir3 * t3;\\n    vec3 finalPos4 = endPos4 + endDir4 * t4;\\n    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));\\n    caustic += intensity * (lightPosArea / finalArea);\\n    // Calculate the area of the triangle in light spaces\\n    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);\\n  }\");\nvar NORMALPROPS = {\n  depth: true,\n  minFilter: THREE.LinearFilter,\n  magFilter: THREE.LinearFilter,\n  type: THREE.UnsignedByteType\n};\nvar CAUSTICPROPS = {\n  minFilter: THREE.LinearMipmapLinearFilter,\n  magFilter: THREE.LinearFilter,\n  type: THREE.FloatType,\n  generateMipmaps: true\n};\nvar Caustics = /*@__PURE__*/React.forwardRef(function (_ref, fref) {\n  var debug = _ref.debug,\n    children = _ref.children,\n    _ref$frames = _ref.frames,\n    frames = _ref$frames === void 0 ? 1 : _ref$frames,\n    _ref$ior = _ref.ior,\n    ior = _ref$ior === void 0 ? 1.1 : _ref$ior,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'white' : _ref$color,\n    _ref$causticsOnly = _ref.causticsOnly,\n    causticsOnly = _ref$causticsOnly === void 0 ? false : _ref$causticsOnly,\n    _ref$backside = _ref.backside,\n    backside = _ref$backside === void 0 ? false : _ref$backside,\n    _ref$backsideIOR = _ref.backsideIOR,\n    backsideIOR = _ref$backsideIOR === void 0 ? 1.1 : _ref$backsideIOR,\n    _ref$worldRadius = _ref.worldRadius,\n    worldRadius = _ref$worldRadius === void 0 ? 0.3125 : _ref$worldRadius,\n    _ref$intensity = _ref.intensity,\n    intensity = _ref$intensity === void 0 ? 0.05 : _ref$intensity,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? 2024 : _ref$resolution,\n    _ref$lightSource = _ref.lightSource,\n    lightSource = _ref$lightSource === void 0 ? [5, 5, 5] : _ref$lightSource,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    CausticsProjectionMaterial: CausticsProjectionMaterial\n  });\n  var ref = React.useRef(null);\n  var camera = React.useRef(null);\n  var scene = React.useRef(null);\n  var plane = React.useRef(null);\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var helper = useHelper(debug && camera, THREE.CameraHelper);\n\n  // Buffers for front and back faces\n  var normalTarget = useFBO(resolution, resolution, NORMALPROPS);\n  var normalTargetB = useFBO(resolution, resolution, NORMALPROPS);\n  var causticsTarget = useFBO(resolution, resolution, CAUSTICPROPS);\n  var causticsTargetB = useFBO(resolution, resolution, CAUSTICPROPS);\n  // Normal materials for front and back faces\n  var _React$useState = React.useState(function () {\n      return createNormalMaterial();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    normalMat = _React$useState2[0];\n  var _React$useState3 = React.useState(function () {\n      return createNormalMaterial(THREE.BackSide);\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    normalMatB = _React$useState4[0];\n  // The quad that catches the caustics\n  var _React$useState5 = React.useState(function () {\n      return new CausticsMaterial();\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 1),\n    causticsMaterial = _React$useState6[0];\n  var _React$useState7 = React.useState(function () {\n      return new FullScreenQuad(causticsMaterial);\n    }),\n    _React$useState8 = _slicedToArray(_React$useState7, 1),\n    causticsQuad = _React$useState8[0];\n  React.useLayoutEffect(function () {\n    ref.current.updateWorldMatrix(false, true);\n  });\n  var count = 0;\n  var v = new THREE.Vector3();\n  var lpF = new THREE.Frustum();\n  var lpM = new THREE.Matrix4();\n  var lpP = new THREE.Plane();\n  var lightDir = new THREE.Vector3();\n  var lightDirInv = new THREE.Vector3();\n  var bounds = new THREE.Box3();\n  var focusPos = new THREE.Vector3();\n  var boundsVertices = [];\n  var worldVerts = [];\n  var projectedVerts = [];\n  var lightDirs = [];\n  var cameraPos = new THREE.Vector3();\n  for (var i = 0; i < 8; i++) {\n    boundsVertices.push(new THREE.Vector3());\n    worldVerts.push(new THREE.Vector3());\n    projectedVerts.push(new THREE.Vector3());\n    lightDirs.push(new THREE.Vector3());\n  }\n  useFrame(function () {\n    if (frames === Infinity || count++ < frames) {\n      var _scene$current$parent, _helper$current;\n      if (Array.isArray(lightSource)) lightDir.fromArray(lightSource).normalize();else lightDir.copy(ref.current.worldToLocal(lightSource.current.getWorldPosition(v)).normalize());\n      lightDirInv.copy(lightDir).multiplyScalar(-1);\n      (_scene$current$parent = scene.current.parent) == null || _scene$current$parent.matrixWorld.identity();\n      bounds.setFromObject(scene.current, true);\n      boundsVertices[0].set(bounds.min.x, bounds.min.y, bounds.min.z);\n      boundsVertices[1].set(bounds.min.x, bounds.min.y, bounds.max.z);\n      boundsVertices[2].set(bounds.min.x, bounds.max.y, bounds.min.z);\n      boundsVertices[3].set(bounds.min.x, bounds.max.y, bounds.max.z);\n      boundsVertices[4].set(bounds.max.x, bounds.min.y, bounds.min.z);\n      boundsVertices[5].set(bounds.max.x, bounds.min.y, bounds.max.z);\n      boundsVertices[6].set(bounds.max.x, bounds.max.y, bounds.min.z);\n      boundsVertices[7].set(bounds.max.x, bounds.max.y, bounds.max.z);\n      for (var _i = 0; _i < 8; _i++) {\n        worldVerts[_i].copy(boundsVertices[_i]);\n      }\n      bounds.getCenter(focusPos);\n      boundsVertices.map(function (v) {\n        return v.sub(focusPos);\n      });\n      var lightPlane = lpP.set(lightDirInv, 0);\n      boundsVertices.map(function (v, i) {\n        return lightPlane.projectPoint(v, projectedVerts[i]);\n      });\n      var centralVert = projectedVerts.reduce(function (a, b) {\n        return a.add(b);\n      }, v.set(0, 0, 0)).divideScalar(projectedVerts.length);\n      var radius = projectedVerts.map(function (v) {\n        return v.distanceTo(centralVert);\n      }).reduce(function (a, b) {\n        return Math.max(a, b);\n      });\n      var dirLength = boundsVertices.map(function (x) {\n        return x.dot(lightDir);\n      }).reduce(function (a, b) {\n        return Math.max(a, b);\n      });\n      // Shadows\n      camera.current.position.copy(cameraPos.copy(lightDir).multiplyScalar(dirLength).add(focusPos));\n      camera.current.lookAt(scene.current.localToWorld(focusPos));\n      var dirMatrix = lpM.lookAt(camera.current.position, focusPos, v.set(0, 1, 0));\n      camera.current.left = -radius;\n      camera.current.right = radius;\n      camera.current.top = radius;\n      camera.current.bottom = -radius;\n      var yOffset = v.set(0, radius, 0).applyMatrix4(dirMatrix);\n      var yTime = (camera.current.position.y + yOffset.y) / lightDir.y;\n      camera.current.near = 0.1;\n      camera.current.far = yTime;\n      camera.current.updateProjectionMatrix();\n      camera.current.updateMatrixWorld();\n\n      // Now find size of ground plane\n      var groundProjectedCoords = worldVerts.map(function (v, i) {\n        return v.add(lightDirs[i].copy(lightDir).multiplyScalar(-v.y / lightDir.y));\n      });\n      var centerPos = groundProjectedCoords.reduce(function (a, b) {\n        return a.add(b);\n      }, v.set(0, 0, 0)).divideScalar(groundProjectedCoords.length);\n      var maxSize = 2 * groundProjectedCoords.map(function (v) {\n        return Math.hypot(v.x - centerPos.x, v.z - centerPos.z);\n      }).reduce(function (a, b) {\n        return Math.max(a, b);\n      });\n      plane.current.scale.setScalar(maxSize);\n      plane.current.position.copy(centerPos);\n      if (debug) (_helper$current = helper.current) == null || _helper$current.update();\n\n      // Inject uniforms\n      normalMatB.viewMatrix.value = normalMat.viewMatrix.value = camera.current.matrixWorldInverse;\n      var dirLightNearPlane = lpF.setFromProjectionMatrix(lpM.multiplyMatrices(camera.current.projectionMatrix, camera.current.matrixWorldInverse)).planes[4];\n      causticsMaterial.cameraMatrixWorld = camera.current.matrixWorld;\n      causticsMaterial.cameraProjectionMatrixInv = camera.current.projectionMatrixInverse;\n      causticsMaterial.lightDir = lightDirInv;\n      causticsMaterial.lightPlaneNormal = dirLightNearPlane.normal;\n      causticsMaterial.lightPlaneConstant = dirLightNearPlane.constant;\n      causticsMaterial.near = camera.current.near;\n      causticsMaterial.far = camera.current.far;\n      causticsMaterial.resolution = resolution;\n      causticsMaterial.size = radius;\n      causticsMaterial.intensity = intensity;\n      causticsMaterial.worldRadius = worldRadius;\n\n      // Switch the scene on\n      scene.current.visible = true;\n\n      // Render front face normals\n      gl.setRenderTarget(normalTarget);\n      gl.clear();\n      scene.current.overrideMaterial = normalMat;\n      gl.render(scene.current, camera.current);\n\n      // Render back face normals, if enabled\n      gl.setRenderTarget(normalTargetB);\n      gl.clear();\n      if (backside) {\n        scene.current.overrideMaterial = normalMatB;\n        gl.render(scene.current, camera.current);\n      }\n\n      // Remove the override material\n      scene.current.overrideMaterial = null;\n\n      // Render front face caustics\n      causticsMaterial.ior = ior;\n      plane.current.material.lightProjMatrix = camera.current.projectionMatrix;\n      plane.current.material.lightViewMatrix = camera.current.matrixWorldInverse;\n      causticsMaterial.normalTexture = normalTarget.texture;\n      causticsMaterial.depthTexture = normalTarget.depthTexture;\n      gl.setRenderTarget(causticsTarget);\n      gl.clear();\n      causticsQuad.render(gl);\n\n      // Render back face caustics, if enabled\n      causticsMaterial.ior = backsideIOR;\n      causticsMaterial.normalTexture = normalTargetB.texture;\n      causticsMaterial.depthTexture = normalTargetB.depthTexture;\n      gl.setRenderTarget(causticsTargetB);\n      gl.clear();\n      if (backside) causticsQuad.render(gl);\n\n      // Reset render target\n      gl.setRenderTarget(null);\n\n      // Switch the scene off if caustics is all that's wanted\n      if (causticsOnly) scene.current.visible = false;\n    }\n  });\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(\"scene\", {\n    ref: scene\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: camera,\n    up: [0, 1, 0]\n  }), children), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: 2,\n    ref: plane,\n    \"rotation-x\": -Math.PI / 2\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"causticsProjectionMaterial\", {\n    transparent: true,\n    color: color,\n    causticsTexture: causticsTarget.texture,\n    causticsTextureB: causticsTargetB.texture,\n    blending: THREE.CustomBlending,\n    blendSrc: THREE.OneFactor,\n    blendDst: THREE.SrcAlphaFactor,\n    depthWrite: false\n  }), debug && /*#__PURE__*/React.createElement(Edges, null, /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: \"#ffff00\",\n    toneMapped: false\n  }))));\n});\nexport { Caustics };","map":{"version":3,"names":["_extends","THREE","React","extend","useThree","useFrame","useFBO","useHelper","shaderMaterial","Edges","FullScreenQuad","version","createNormalMaterial","side","arguments","length","undefined","FrontSide","viewMatrix","value","Matrix4","Object","assign","MeshNormalMaterial","onBeforeCompile","shader","uniforms","fragmentShader","replace","CausticsProjectionMaterial","causticsTexture","causticsTextureB","color","Color","lightProjMatrix","lightViewMatrix","concat","CausticsMaterial","cameraMatrixWorld","cameraProjectionMatrixInv","normalTexture","depthTexture","lightDir","Vector3","lightPlaneNormal","lightPlaneConstant","near","far","modelMatrix","worldRadius","ior","bounces","resolution","size","intensity","NORMALPROPS","depth","minFilter","LinearFilter","magFilter","type","UnsignedByteType","CAUSTICPROPS","LinearMipmapLinearFilter","FloatType","generateMipmaps","Caustics","forwardRef","_ref","fref","debug","children","_ref$frames","frames","_ref$ior","_ref$color","_ref$causticsOnly","causticsOnly","_ref$backside","backside","_ref$backsideIOR","backsideIOR","_ref$worldRadius","_ref$intensity","_ref$resolution","_ref$lightSource","lightSource","props","_objectWithoutProperties","_excluded","ref","useRef","camera","scene","plane","gl","state","helper","CameraHelper","normalTarget","normalTargetB","causticsTarget","causticsTargetB","_React$useState","useState","_React$useState2","_slicedToArray","normalMat","_React$useState3","BackSide","_React$useState4","normalMatB","_React$useState5","_React$useState6","causticsMaterial","_React$useState7","_React$useState8","causticsQuad","useLayoutEffect","current","updateWorldMatrix","count","v","lpF","Frustum","lpM","lpP","Plane","lightDirInv","bounds","Box3","focusPos","boundsVertices","worldVerts","projectedVerts","lightDirs","cameraPos","i","push","Infinity","_scene$current$parent","_helper$current","Array","isArray","fromArray","normalize","copy","worldToLocal","getWorldPosition","multiplyScalar","parent","matrixWorld","identity","setFromObject","set","min","x","y","z","max","getCenter","map","sub","lightPlane","projectPoint","centralVert","reduce","a","b","add","divideScalar","radius","distanceTo","Math","dirLength","dot","position","lookAt","localToWorld","dirMatrix","left","right","top","bottom","yOffset","applyMatrix4","yTime","updateProjectionMatrix","updateMatrixWorld","groundProjectedCoords","centerPos","maxSize","hypot","scale","setScalar","update","matrixWorldInverse","dirLightNearPlane","setFromProjectionMatrix","multiplyMatrices","projectionMatrix","planes","projectionMatrixInverse","normal","constant","visible","setRenderTarget","clear","overrideMaterial","render","material","texture","useImperativeHandle","createElement","up","renderOrder","PI","transparent","blending","CustomBlending","blendSrc","OneFactor","blendDst","SrcAlphaFactor","depthWrite","toneMapped"],"sources":["C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@react-three/drei/core/Caustics.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { useHelper } from './useHelper.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { Edges } from './Edges.js';\nimport { FullScreenQuad } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\n\nfunction createNormalMaterial(side = THREE.FrontSide) {\n  const viewMatrix = {\n    value: new THREE.Matrix4()\n  };\n  return Object.assign(new THREE.MeshNormalMaterial({\n    side\n  }), {\n    viewMatrix,\n    onBeforeCompile: shader => {\n      shader.uniforms.viewMatrix = viewMatrix;\n      shader.fragmentShader = `vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n         }\\n` + shader.fragmentShader.replace('#include <normal_fragment_maps>', `#include <normal_fragment_maps>\n           normal = inverseTransformDirection( normal, viewMatrix );\\n`);\n    }\n  });\n}\nconst CausticsProjectionMaterial = /*@__PURE__*/shaderMaterial({\n  causticsTexture: null,\n  causticsTextureB: null,\n  color: /*@__PURE__*/new THREE.Color(),\n  lightProjMatrix: /*@__PURE__*/new THREE.Matrix4(),\n  lightViewMatrix: /*@__PURE__*/new THREE.Matrix4()\n}, `varying vec3 vWorldPosition;   \n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vec4 worldPosition = modelMatrix * vec4(position, 1.);\n     vWorldPosition = worldPosition.xyz;\n   }`, `varying vec3 vWorldPosition;\n  uniform vec3 color;\n  uniform sampler2D causticsTexture; \n  uniform sampler2D causticsTextureB; \n  uniform mat4 lightProjMatrix;\n  uniform mat4 lightViewMatrix;\n   void main() {\n    // Apply caustics  \n    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);\n    lightSpacePos.xyz /= lightSpacePos.w;\n    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; \n    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;\n    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;\n    gl_FragColor = vec4((front + back) * color, 1.0);\n    #include <tonemapping_fragment>\n    #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nconst CausticsMaterial = /*@__PURE__*/shaderMaterial({\n  cameraMatrixWorld: /*@__PURE__*/new THREE.Matrix4(),\n  cameraProjectionMatrixInv: /*@__PURE__*/new THREE.Matrix4(),\n  normalTexture: null,\n  depthTexture: null,\n  lightDir: /*@__PURE__*/new THREE.Vector3(0, 1, 0),\n  lightPlaneNormal: /*@__PURE__*/new THREE.Vector3(0, 1, 0),\n  lightPlaneConstant: 0,\n  near: 0.1,\n  far: 100,\n  modelMatrix: /*@__PURE__*/new THREE.Matrix4(),\n  worldRadius: 1 / 40,\n  ior: 1.1,\n  bounces: 0,\n  resolution: 1024,\n  size: 10,\n  intensity: 0.5\n}, /* glsl */`\n  varying vec2 vUv;\n  void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }`, /* glsl */`  \n  uniform mat4 cameraMatrixWorld;\n  uniform mat4 cameraProjectionMatrixInv;\n  uniform vec3 lightDir;\n  uniform vec3 lightPlaneNormal;\n  uniform float lightPlaneConstant;\n  uniform float near;\n  uniform float far;\n  uniform float time;\n  uniform float worldRadius;\n  uniform float resolution;\n  uniform float size;\n  uniform float intensity;\n  uniform float ior;\n  precision highp isampler2D;\n  precision highp usampler2D;\n  uniform sampler2D normalTexture;\n  uniform sampler2D depthTexture;\n  uniform float bounces;\n  varying vec2 vUv;\n  vec3 WorldPosFromDepth(float depth, vec2 coord) {\n    float z = depth * 2.0 - 1.0;\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;\n    // Perspective division\n    viewSpacePosition /= viewSpacePosition.w;\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\n    return worldSpacePosition.xyz;\n  }                  \n  float sdPlane( vec3 p, vec3 n, float h ) {\n    // n must be normalized\n    return dot(p,n) + h;\n  }\n  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n  }\n  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {\n    rayOrigin = ro;\n    rayDirection = rd;\n    rayDirection = refract(rayDirection, normal, 1.0 / ior);\n    rayOrigin = pos + rayDirection * 0.1;\n    return rayDirection;\n  }\n  void main() {\n    // Each sample consists of random offset in the x and y direction\n    float caustic = 0.0;\n    float causticTexelSize = (1.0 / resolution) * size * 2.0;\n    float texelsNeeded = worldRadius / causticTexelSize;\n    float sampleRadius = texelsNeeded / resolution;\n    float sum = 0.0;\n    if (texture2D(depthTexture, vUv).x == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 uv1 = vUv + offset1 * sampleRadius;\n    vec2 uv2 = vUv + offset2 * sampleRadius;\n    vec2 uv3 = vUv + offset3 * sampleRadius;\n    vec2 uv4 = vUv + offset4 * sampleRadius;\n    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;\n    float depth1 = texture2D(depthTexture, uv1, -10.0).x;\n    float depth2 = texture2D(depthTexture, uv2, -10.0).x;\n    float depth3 = texture2D(depthTexture, uv3, -10.0).x;\n    float depth4 = texture2D(depthTexture, uv4, -10.0).x;\n    // Sanity check the depths\n    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec3 pos1 = WorldPosFromDepth(depth1, uv1);\n    vec3 pos2 = WorldPosFromDepth(depth2, uv2);\n    vec3 pos3 = WorldPosFromDepth(depth3, uv3);\n    vec3 pos4 = WorldPosFromDepth(depth4, uv4);\n    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);\n    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);\n    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);\n    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);\n    vec3 endPos1, endPos2, endPos3, endPos4;\n    vec3 endDir1, endDir2, endDir3, endDir4;\n    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);\n    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);\n    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);\n    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);\n    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));\n    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));\n    vec3 finalPos1 = endPos1 + endDir1 * t1;\n    vec3 finalPos2 = endPos2 + endDir2 * t2;\n    vec3 finalPos3 = endPos3 + endDir3 * t3;\n    vec3 finalPos4 = endPos4 + endDir4 * t4;\n    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));\n    caustic += intensity * (lightPosArea / finalArea);\n    // Calculate the area of the triangle in light spaces\n    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);\n  }`);\nconst NORMALPROPS = {\n  depth: true,\n  minFilter: THREE.LinearFilter,\n  magFilter: THREE.LinearFilter,\n  type: THREE.UnsignedByteType\n};\nconst CAUSTICPROPS = {\n  minFilter: THREE.LinearMipmapLinearFilter,\n  magFilter: THREE.LinearFilter,\n  type: THREE.FloatType,\n  generateMipmaps: true\n};\nconst Caustics = /*@__PURE__*/React.forwardRef(({\n  debug,\n  children,\n  frames = 1,\n  ior = 1.1,\n  color = 'white',\n  causticsOnly = false,\n  backside = false,\n  backsideIOR = 1.1,\n  worldRadius = 0.3125,\n  intensity = 0.05,\n  resolution = 2024,\n  lightSource = [5, 5, 5],\n  ...props\n}, fref) => {\n  extend({\n    CausticsProjectionMaterial\n  });\n  const ref = React.useRef(null);\n  const camera = React.useRef(null);\n  const scene = React.useRef(null);\n  const plane = React.useRef(null);\n  const gl = useThree(state => state.gl);\n  const helper = useHelper(debug && camera, THREE.CameraHelper);\n\n  // Buffers for front and back faces\n  const normalTarget = useFBO(resolution, resolution, NORMALPROPS);\n  const normalTargetB = useFBO(resolution, resolution, NORMALPROPS);\n  const causticsTarget = useFBO(resolution, resolution, CAUSTICPROPS);\n  const causticsTargetB = useFBO(resolution, resolution, CAUSTICPROPS);\n  // Normal materials for front and back faces\n  const [normalMat] = React.useState(() => createNormalMaterial());\n  const [normalMatB] = React.useState(() => createNormalMaterial(THREE.BackSide));\n  // The quad that catches the caustics\n  const [causticsMaterial] = React.useState(() => new CausticsMaterial());\n  const [causticsQuad] = React.useState(() => new FullScreenQuad(causticsMaterial));\n  React.useLayoutEffect(() => {\n    ref.current.updateWorldMatrix(false, true);\n  });\n  let count = 0;\n  const v = new THREE.Vector3();\n  const lpF = new THREE.Frustum();\n  const lpM = new THREE.Matrix4();\n  const lpP = new THREE.Plane();\n  const lightDir = new THREE.Vector3();\n  const lightDirInv = new THREE.Vector3();\n  const bounds = new THREE.Box3();\n  const focusPos = new THREE.Vector3();\n  const boundsVertices = [];\n  const worldVerts = [];\n  const projectedVerts = [];\n  const lightDirs = [];\n  const cameraPos = new THREE.Vector3();\n  for (let i = 0; i < 8; i++) {\n    boundsVertices.push(new THREE.Vector3());\n    worldVerts.push(new THREE.Vector3());\n    projectedVerts.push(new THREE.Vector3());\n    lightDirs.push(new THREE.Vector3());\n  }\n  useFrame(() => {\n    if (frames === Infinity || count++ < frames) {\n      var _scene$current$parent, _helper$current;\n      if (Array.isArray(lightSource)) lightDir.fromArray(lightSource).normalize();else lightDir.copy(ref.current.worldToLocal(lightSource.current.getWorldPosition(v)).normalize());\n      lightDirInv.copy(lightDir).multiplyScalar(-1);\n      (_scene$current$parent = scene.current.parent) == null || _scene$current$parent.matrixWorld.identity();\n      bounds.setFromObject(scene.current, true);\n      boundsVertices[0].set(bounds.min.x, bounds.min.y, bounds.min.z);\n      boundsVertices[1].set(bounds.min.x, bounds.min.y, bounds.max.z);\n      boundsVertices[2].set(bounds.min.x, bounds.max.y, bounds.min.z);\n      boundsVertices[3].set(bounds.min.x, bounds.max.y, bounds.max.z);\n      boundsVertices[4].set(bounds.max.x, bounds.min.y, bounds.min.z);\n      boundsVertices[5].set(bounds.max.x, bounds.min.y, bounds.max.z);\n      boundsVertices[6].set(bounds.max.x, bounds.max.y, bounds.min.z);\n      boundsVertices[7].set(bounds.max.x, bounds.max.y, bounds.max.z);\n      for (let i = 0; i < 8; i++) {\n        worldVerts[i].copy(boundsVertices[i]);\n      }\n      bounds.getCenter(focusPos);\n      boundsVertices.map(v => v.sub(focusPos));\n      const lightPlane = lpP.set(lightDirInv, 0);\n      boundsVertices.map((v, i) => lightPlane.projectPoint(v, projectedVerts[i]));\n      const centralVert = projectedVerts.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(projectedVerts.length);\n      const radius = projectedVerts.map(v => v.distanceTo(centralVert)).reduce((a, b) => Math.max(a, b));\n      const dirLength = boundsVertices.map(x => x.dot(lightDir)).reduce((a, b) => Math.max(a, b));\n      // Shadows\n      camera.current.position.copy(cameraPos.copy(lightDir).multiplyScalar(dirLength).add(focusPos));\n      camera.current.lookAt(scene.current.localToWorld(focusPos));\n      const dirMatrix = lpM.lookAt(camera.current.position, focusPos, v.set(0, 1, 0));\n      camera.current.left = -radius;\n      camera.current.right = radius;\n      camera.current.top = radius;\n      camera.current.bottom = -radius;\n      const yOffset = v.set(0, radius, 0).applyMatrix4(dirMatrix);\n      const yTime = (camera.current.position.y + yOffset.y) / lightDir.y;\n      camera.current.near = 0.1;\n      camera.current.far = yTime;\n      camera.current.updateProjectionMatrix();\n      camera.current.updateMatrixWorld();\n\n      // Now find size of ground plane\n      const groundProjectedCoords = worldVerts.map((v, i) => v.add(lightDirs[i].copy(lightDir).multiplyScalar(-v.y / lightDir.y)));\n      const centerPos = groundProjectedCoords.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(groundProjectedCoords.length);\n      const maxSize = 2 * groundProjectedCoords.map(v => Math.hypot(v.x - centerPos.x, v.z - centerPos.z)).reduce((a, b) => Math.max(a, b));\n      plane.current.scale.setScalar(maxSize);\n      plane.current.position.copy(centerPos);\n      if (debug) (_helper$current = helper.current) == null || _helper$current.update();\n\n      // Inject uniforms\n      normalMatB.viewMatrix.value = normalMat.viewMatrix.value = camera.current.matrixWorldInverse;\n      const dirLightNearPlane = lpF.setFromProjectionMatrix(lpM.multiplyMatrices(camera.current.projectionMatrix, camera.current.matrixWorldInverse)).planes[4];\n      causticsMaterial.cameraMatrixWorld = camera.current.matrixWorld;\n      causticsMaterial.cameraProjectionMatrixInv = camera.current.projectionMatrixInverse;\n      causticsMaterial.lightDir = lightDirInv;\n      causticsMaterial.lightPlaneNormal = dirLightNearPlane.normal;\n      causticsMaterial.lightPlaneConstant = dirLightNearPlane.constant;\n      causticsMaterial.near = camera.current.near;\n      causticsMaterial.far = camera.current.far;\n      causticsMaterial.resolution = resolution;\n      causticsMaterial.size = radius;\n      causticsMaterial.intensity = intensity;\n      causticsMaterial.worldRadius = worldRadius;\n\n      // Switch the scene on\n      scene.current.visible = true;\n\n      // Render front face normals\n      gl.setRenderTarget(normalTarget);\n      gl.clear();\n      scene.current.overrideMaterial = normalMat;\n      gl.render(scene.current, camera.current);\n\n      // Render back face normals, if enabled\n      gl.setRenderTarget(normalTargetB);\n      gl.clear();\n      if (backside) {\n        scene.current.overrideMaterial = normalMatB;\n        gl.render(scene.current, camera.current);\n      }\n\n      // Remove the override material\n      scene.current.overrideMaterial = null;\n\n      // Render front face caustics\n      causticsMaterial.ior = ior;\n      plane.current.material.lightProjMatrix = camera.current.projectionMatrix;\n      plane.current.material.lightViewMatrix = camera.current.matrixWorldInverse;\n      causticsMaterial.normalTexture = normalTarget.texture;\n      causticsMaterial.depthTexture = normalTarget.depthTexture;\n      gl.setRenderTarget(causticsTarget);\n      gl.clear();\n      causticsQuad.render(gl);\n\n      // Render back face caustics, if enabled\n      causticsMaterial.ior = backsideIOR;\n      causticsMaterial.normalTexture = normalTargetB.texture;\n      causticsMaterial.depthTexture = normalTargetB.depthTexture;\n      gl.setRenderTarget(causticsTargetB);\n      gl.clear();\n      if (backside) causticsQuad.render(gl);\n\n      // Reset render target\n      gl.setRenderTarget(null);\n\n      // Switch the scene off if caustics is all that's wanted\n      if (causticsOnly) scene.current.visible = false;\n    }\n  });\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(\"scene\", {\n    ref: scene\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: camera,\n    up: [0, 1, 0]\n  }), children), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: 2,\n    ref: plane,\n    \"rotation-x\": -Math.PI / 2\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"causticsProjectionMaterial\", {\n    transparent: true,\n    color: color,\n    causticsTexture: causticsTarget.texture,\n    causticsTextureB: causticsTargetB.texture,\n    blending: THREE.CustomBlending,\n    blendSrc: THREE.OneFactor,\n    blendDst: THREE.SrcAlphaFactor,\n    depthWrite: false\n  }), debug && /*#__PURE__*/React.createElement(Edges, null, /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: \"#ffff00\",\n    toneMapped: false\n  }))));\n});\n\nexport { Caustics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}