{"ast":null,"code":"import _classCallCheck from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as THREE from 'three';\nimport { version } from '../helpers/constants.js';\nvar ConvolutionMaterial = /*#__PURE__*/function (_THREE$ShaderMaterial) {\n  _inherits(ConvolutionMaterial, _THREE$ShaderMaterial);\n  var _super = _createSuper(ConvolutionMaterial);\n  function ConvolutionMaterial() {\n    var _this;\n    var texelSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new THREE.Vector2();\n    _classCallCheck(this, ConvolutionMaterial);\n    _this = _super.call(this, {\n      uniforms: {\n        inputBuffer: new THREE.Uniform(null),\n        depthBuffer: new THREE.Uniform(null),\n        resolution: new THREE.Uniform(new THREE.Vector2()),\n        texelSize: new THREE.Uniform(new THREE.Vector2()),\n        halfTexelSize: new THREE.Uniform(new THREE.Vector2()),\n        kernel: new THREE.Uniform(0.0),\n        scale: new THREE.Uniform(1.0),\n        cameraNear: new THREE.Uniform(0.0),\n        cameraFar: new THREE.Uniform(1.0),\n        minDepthThreshold: new THREE.Uniform(0.0),\n        maxDepthThreshold: new THREE.Uniform(1.0),\n        depthScale: new THREE.Uniform(0.0),\n        depthToBlurRatioBias: new THREE.Uniform(0.25)\n      },\n      fragmentShader: \"#include <common>\\n        #include <dithering_pars_fragment>      \\n        uniform sampler2D inputBuffer;\\n        uniform sampler2D depthBuffer;\\n        uniform float cameraNear;\\n        uniform float cameraFar;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec2 vUv;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n\\n        void main() {\\n          float depthFactor = 0.0;\\n          \\n          #ifdef USE_DEPTH\\n            vec4 depth = texture2D(depthBuffer, vUv);\\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n            depthFactor *= depthScale;\\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\\n          #endif\\n          \\n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\\n          gl_FragColor = sum * 0.25 ;\\n\\n          #include <dithering_fragment>\\n          #include <tonemapping_fragment>\\n          #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n        }\"),\n      vertexShader: \"uniform vec2 texelSize;\\n        uniform vec2 halfTexelSize;\\n        uniform float kernel;\\n        uniform float scale;\\n        varying vec2 vUv;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n\\n        void main() {\\n          vec2 uv = position.xy * 0.5 + 0.5;\\n          vUv = uv;\\n\\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\\n\\n          gl_Position = vec4(position.xy, 1.0, 1.0);\\n        }\",\n      blending: THREE.NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    _this.toneMapped = false;\n    _this.setTexelSize(texelSize.x, texelSize.y);\n    _this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n    return _this;\n  }\n  _createClass(ConvolutionMaterial, [{\n    key: \"setTexelSize\",\n    value: function setTexelSize(x, y) {\n      this.uniforms.texelSize.value.set(x, y);\n      this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n    }\n  }, {\n    key: \"setResolution\",\n    value: function setResolution(resolution) {\n      this.uniforms.resolution.value.copy(resolution);\n    }\n  }]);\n  return ConvolutionMaterial;\n}(THREE.ShaderMaterial);\nexport { ConvolutionMaterial };","map":{"version":3,"names":["THREE","version","ConvolutionMaterial","_THREE$ShaderMaterial","_inherits","_super","_createSuper","_this","texelSize","arguments","length","undefined","Vector2","_classCallCheck","call","uniforms","inputBuffer","Uniform","depthBuffer","resolution","halfTexelSize","kernel","scale","cameraNear","cameraFar","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","fragmentShader","concat","vertexShader","blending","NoBlending","depthWrite","depthTest","toneMapped","setTexelSize","x","y","Float32Array","_createClass","key","value","set","multiplyScalar","setResolution","copy","ShaderMaterial"],"sources":["C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@react-three/drei/materials/ConvolutionMaterial.js"],"sourcesContent":["import * as THREE from 'three';\nimport { version } from '../helpers/constants.js';\n\nclass ConvolutionMaterial extends THREE.ShaderMaterial {\n  constructor(texelSize = new THREE.Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new THREE.Uniform(null),\n        depthBuffer: new THREE.Uniform(null),\n        resolution: new THREE.Uniform(new THREE.Vector2()),\n        texelSize: new THREE.Uniform(new THREE.Vector2()),\n        halfTexelSize: new THREE.Uniform(new THREE.Vector2()),\n        kernel: new THREE.Uniform(0.0),\n        scale: new THREE.Uniform(1.0),\n        cameraNear: new THREE.Uniform(0.0),\n        cameraFar: new THREE.Uniform(1.0),\n        minDepthThreshold: new THREE.Uniform(0.0),\n        maxDepthThreshold: new THREE.Uniform(1.0),\n        depthScale: new THREE.Uniform(0.0),\n        depthToBlurRatioBias: new THREE.Uniform(0.25)\n      },\n      fragmentShader: `#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n        }`,\n      vertexShader: `uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }`,\n      blending: THREE.NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n  setResolution(resolution) {\n    this.uniforms.resolution.value.copy(resolution);\n  }\n}\n\nexport { ConvolutionMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}