{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\nimport { version } from '../helpers/constants.js';\nvar StarfieldMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(StarfieldMaterial, _ShaderMaterial);\n  var _super = _createSuper(StarfieldMaterial);\n  function StarfieldMaterial() {\n    _classCallCheck(this, StarfieldMaterial);\n    return _super.call(this, {\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: /* glsl */\"\\n      uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader: /* glsl */\"\\n      uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n\\n        #include <tonemapping_fragment>\\n\\t      #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n      }\")\n    });\n  }\n  return _createClass(StarfieldMaterial);\n}(ShaderMaterial);\nvar genStar = function genStar(r) {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nvar Stars = /*@__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$radius = _ref.radius,\n    radius = _ref$radius === void 0 ? 100 : _ref$radius,\n    _ref$depth = _ref.depth,\n    depth = _ref$depth === void 0 ? 50 : _ref$depth,\n    _ref$count = _ref.count,\n    count = _ref$count === void 0 ? 5000 : _ref$count,\n    _ref$saturation = _ref.saturation,\n    saturation = _ref$saturation === void 0 ? 0 : _ref$saturation,\n    _ref$factor = _ref.factor,\n    factor = _ref$factor === void 0 ? 4 : _ref$factor,\n    _ref$fade = _ref.fade,\n    fade = _ref$fade === void 0 ? false : _ref$fade,\n    _ref$speed = _ref.speed,\n    speed = _ref$speed === void 0 ? 1 : _ref$speed;\n  var material = React.useRef();\n  var _React$useMemo = React.useMemo(function () {\n      var positions = [];\n      var colors = [];\n      var sizes = Array.from({\n        length: count\n      }, function () {\n        return (0.5 + 0.5 * Math.random()) * factor;\n      });\n      var color = new Color();\n      var r = radius + depth;\n      var increment = depth / count;\n      for (var i = 0; i < count; i++) {\n        r -= increment * Math.random();\n        positions.push.apply(positions, _toConsumableArray(genStar(r).toArray()));\n        color.setHSL(i / count, saturation, 0.9);\n        colors.push(color.r, color.g, color.b);\n      }\n      return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n    }, [count, depth, factor, radius, saturation]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n    position = _React$useMemo2[0],\n    color = _React$useMemo2[1],\n    size = _React$useMemo2[2];\n  useFrame(function (state) {\n    return material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed);\n  });\n  var _React$useState = React.useState(function () {\n      return new StarfieldMaterial();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    starfieldMaterial = _React$useState2[0];\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    depthWrite: false,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["React","useFrame","Color","AdditiveBlending","ShaderMaterial","Vector3","Spherical","version","StarfieldMaterial","_ShaderMaterial","_inherits","_super","_createSuper","_classCallCheck","call","uniforms","time","value","fade","vertexShader","fragmentShader","concat","_createClass","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","_ref","ref","_ref$radius","radius","_ref$depth","depth","_ref$count","count","_ref$saturation","saturation","_ref$factor","factor","_ref$fade","_ref$speed","speed","material","useRef","_React$useMemo","useMemo","positions","colors","sizes","Array","from","length","color","increment","i","push","apply","_toConsumableArray","toArray","setHSL","g","b","Float32Array","_React$useMemo2","_slicedToArray","position","size","state","current","clock","getElapsedTime","_React$useState","useState","_React$useState2","starfieldMaterial","createElement","attach","args","object","blending","depthWrite","transparent","vertexColors"],"sources":["C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@react-three/drei/core/Stars.js"],"sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, AdditiveBlending, ShaderMaterial, Vector3, Spherical } from 'three';\nimport { version } from '../helpers/constants.js';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader: /* glsl */`\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader: /* glsl */`\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n      }`\n    });\n  }\n}\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\nconst Stars = /*@__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    depthWrite: false,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}