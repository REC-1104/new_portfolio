{"ast":null,"code":"import _classCallCheck from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Panel from \"./panel.js\";\nvar _Stats = /*#__PURE__*/function () {\n  function _Stats() {\n    var _this = this;\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$logsPerSecond = _ref.logsPerSecond,\n      logsPerSecond = _ref$logsPerSecond === void 0 ? 20 : _ref$logsPerSecond,\n      _ref$samplesLog = _ref.samplesLog,\n      samplesLog = _ref$samplesLog === void 0 ? 100 : _ref$samplesLog,\n      _ref$samplesGraph = _ref.samplesGraph,\n      samplesGraph = _ref$samplesGraph === void 0 ? 10 : _ref$samplesGraph,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 2 : _ref$precision,\n      _ref$minimal = _ref.minimal,\n      minimal = _ref$minimal === void 0 ? false : _ref$minimal,\n      _ref$horizontal = _ref.horizontal,\n      horizontal = _ref$horizontal === void 0 ? true : _ref$horizontal,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 0 : _ref$mode;\n    _classCallCheck(this, _Stats);\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", function (event) {\n        event.preventDefault();\n        _this.showPanel(++_this.mode % _this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", function () {\n        _this.resizePanel(_this.fpsPanel, 0);\n        _this.resizePanel(_this.msPanel, 1);\n        if (_this.gpuPanel) {\n          _this.resizePanel(_this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  _createClass(_Stats, [{\n    key: \"resizePanel\",\n    value: function resizePanel(panel, offset) {\n      panel.canvas.style.position = \"absolute\";\n      if (this.minimal) {\n        panel.canvas.style.display = \"none\";\n      } else {\n        panel.canvas.style.display = \"block\";\n        if (this.horizontal) {\n          panel.canvas.style.top = \"0px\";\n          panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n        } else {\n          panel.canvas.style.left = \"0px\";\n          panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n        }\n      }\n    }\n  }, {\n    key: \"addPanel\",\n    value: function addPanel(panel, offset) {\n      if (panel.canvas) {\n        this.container.appendChild(panel.canvas);\n        this.resizePanel(panel, offset);\n      }\n      return panel;\n    }\n  }, {\n    key: \"showPanel\",\n    value: function showPanel(id) {\n      for (var i = 0; i < this.container.children.length; i++) {\n        var child = this.container.children[i];\n        child.style.display = i === id ? \"block\" : \"none\";\n      }\n      this.mode = id;\n    }\n  }, {\n    key: \"init\",\n    value: function init(canvas) {\n      this.canvasGpu = canvas;\n      if (!this.canvasGpu) return;\n      this.gl = this.canvasGpu.getContext(\"webgl2\");\n      this.ext = this.gl ? this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\") : null;\n      if (this.ext) {\n        this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n      }\n    }\n  }, {\n    key: \"begin\",\n    value: function begin() {\n      this.beginProfiling(\"cpu-started\");\n      if (!this.gl || !this.ext) return;\n      if (this.query) {\n        var available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n        this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n        if (available && !this.disjoint) {\n          this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n          var ms = this.ns * 1e-6;\n          if (available || this.disjoint) {\n            this.gl.deleteQuery(this.query);\n            this.query = null;\n          }\n          if (available) {\n            this.addToAverage(ms, this.averageGpu);\n          }\n        }\n      }\n      if (!this.query) {\n        this.queryCreated = true;\n        this.query = this.gl.createQuery();\n        if (this.query) {\n          this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n        }\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.beginTime = this.endInternal();\n      this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n      if (!this.gl || !this.ext) return;\n      if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      }\n    }\n  }, {\n    key: \"endInternal\",\n    value: function endInternal() {\n      this.frames++;\n      var time = (performance || Date).now();\n      if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n        this.updatePanel(this.msPanel, this.averageCpu);\n        this.updatePanel(this.gpuPanel, this.averageGpu);\n        this.prevCpuTime = time;\n      }\n      if (time >= this.prevTime + 1e3) {\n        var fps = this.frames * 1e3 / (time - this.prevTime);\n        this.fpsPanel.update(fps, fps, 100, 100, 0);\n        this.prevTime = time;\n        this.frames = 0;\n      }\n      return time;\n    }\n  }, {\n    key: \"addToAverage\",\n    value: function addToAverage(value, averageArray) {\n      averageArray.logs.push(value);\n      if (averageArray.logs.length > this.samplesLog) {\n        averageArray.logs.shift();\n      }\n      averageArray.graph.push(value);\n      if (averageArray.graph.length > this.samplesGraph) {\n        averageArray.graph.shift();\n      }\n    }\n  }, {\n    key: \"beginProfiling\",\n    value: function beginProfiling(marker) {\n      if (window.performance) {\n        window.performance.mark(marker);\n      }\n    }\n  }, {\n    key: \"endProfiling\",\n    value: function endProfiling(startMarker, endMarker, measureName, averageArray) {\n      if (window.performance && endMarker) {\n        window.performance.mark(endMarker);\n        var cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n        this.addToAverage(cpuMeasure.duration, averageArray);\n      }\n    }\n  }, {\n    key: \"updatePanel\",\n    value: function updatePanel(panel, averageArray) {\n      if (averageArray.logs.length > 0) {\n        var sumLog = 0;\n        var max = 0.01;\n        for (var i = 0; i < averageArray.logs.length; i++) {\n          sumLog += averageArray.logs[i];\n          if (averageArray.logs[i] > max) {\n            max = averageArray.logs[i];\n          }\n        }\n        var sumGraph = 0;\n        var maxGraph = 0.01;\n        for (var _i = 0; _i < averageArray.graph.length; _i++) {\n          sumGraph += averageArray.graph[_i];\n          if (averageArray.graph[_i] > maxGraph) {\n            maxGraph = averageArray.graph[_i];\n          }\n        }\n        if (panel) {\n          panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n        }\n      }\n    }\n  }]);\n  return _Stats;\n}();\n_Stats.Panel = Panel;\nvar Stats = _Stats;\nexport { Stats as default };","map":{"version":3,"names":["_Stats","_this","_ref","arguments","length","undefined","_ref$logsPerSecond","logsPerSecond","_ref$samplesLog","samplesLog","_ref$samplesGraph","samplesGraph","_ref$precision","precision","_ref$minimal","minimal","_ref$horizontal","horizontal","_ref$mode","mode","_classCallCheck","container","document","createElement","style","cssText","canvasGpu","gl","query","beginTime","performance","Date","now","prevTime","prevCpuTime","frames","averageCpu","logs","graph","averageGpu","queryCreated","fpsPanel","addPanel","Panel","msPanel","gpuPanel","addEventListener","event","preventDefault","showPanel","children","window","resizePanel","_createClass","key","value","panel","offset","canvas","position","display","top","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","init","getContext","ext","getExtension","begin","beginProfiling","available","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","ns","QUERY_RESULT","ms","deleteQuery","addToAverage","createQuery","beginQuery","TIME_ELAPSED_EXT","end","endInternal","endProfiling","getQuery","CURRENT_QUERY","endQuery","time","updatePanel","fps","update","averageArray","push","shift","marker","mark","startMarker","endMarker","measureName","cpuMeasure","measure","duration","sumLog","max","sumGraph","maxGraph","Math","min","Stats"],"sources":["C:\\Users\\Dhruv\\OneDrive\\Documents\\GitHub\\new_portfolio\\node_modules\\stats-gl\\lib\\main.ts"],"sourcesContent":["import Panel from \"./panel\";\n\nexport interface AverageArray {\n  logs: number[];\n  graph: number[];\n}\n\n\nclass Stats {\n  mode: number;\n  container: HTMLDivElement;\n  minimal: boolean;\n  horizontal: boolean;\n  beginTime: number;\n  prevTime: number;\n  prevCpuTime: number;\n  frames: number;\n  averageCpu: AverageArray;\n  averageGpu: AverageArray;\n  queryCreated: boolean;\n  fpsPanel: Panel;\n  static Panel: typeof Panel = Panel;\n  msPanel: Panel;\n  gpuPanel: Panel | null;\n  samplesLog: number;\n  samplesGraph: number;\n  logsPerSecond: number;\n  precision: number;\n  canvasGpu: HTMLCanvasElement | null;\n  gl: WebGL2RenderingContext | null;\n  ext: any;\n  query: WebGLQuery | null;\n  disjoint: any;\n  ns: any;\n\n  constructor( { logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {} ) {\n\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement( 'div' );\n    this.container.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\n\n    if ( minimal ) {\n\n      this.container.style.cssText += 'cursor:pointer';\n\n    }\n\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query =  null;\n\n    this.minimal = minimal;\n\n    this.beginTime = ( performance || Date ).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n\n    this.queryCreated = false;\n\n    this.fpsPanel = this.addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ), 0 );\n    this.msPanel = this.addPanel( new Stats.Panel( 'CPU', '#0f0', '#020' ), 1 );\n    this.gpuPanel = null;\n\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n\n    if ( this.minimal ) {\n\n      this.container.addEventListener( 'click', ( event ) => {\n\n        event.preventDefault();\n        this.showPanel( ++ this.mode % this.container.children.length );\n\n      }, false );\n\n      this.mode = mode;\n      this.showPanel( this.mode );\n\n    } else {\n\n      window.addEventListener('resize', () =>{\n        \n        this.resizePanel( this.fpsPanel, 0 );\n        this.resizePanel( this.msPanel, 1 );\n  \n        if (this.gpuPanel) {\n          this.resizePanel( this.gpuPanel, 2 );\n        }\n      })\n    }\n\n  }\n\n  resizePanel( panel: Panel, offset: number) {\n\n    panel.canvas.style.position = 'absolute';\n\n    if ( this.minimal ) {\n\n      panel.canvas.style.display = 'none';\n\n    } else {\n\n      panel.canvas.style.display = 'block';\n      if (this.horizontal) {\n        panel.canvas.style.top = '0px';\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\n      } else {\n        panel.canvas.style.left = '0px';\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR  + 'px';\n\n      }\n    }\n  }\n    \n  addPanel(panel: Panel, offset: number) {\n\n    if(panel.canvas) {\n\n      this.container.appendChild(panel.canvas);\n    \n      this.resizePanel(panel, offset);\n\n    }\n\n    return panel;\n\n  }\n\n  showPanel( id: number ) {\n\n    for ( let i = 0; i < this.container.children.length; i ++ ) {\n      const child = this.container.children[i] as HTMLElement;\n\n      child.style.display = i === id ? 'block' : 'none';\n\n    }\n\n    this.mode = id;\n\n  }\n\n  init( canvas: any ) {\n\n    this.canvasGpu = canvas;\n    if ( ! this.canvasGpu ) return;\n    this.gl = this.canvasGpu.getContext( 'webgl2' );\n    this.ext = this.gl ? this.gl.getExtension( 'EXT_disjoint_timer_query_webgl2' ) : null;\n    if ( this.ext ) {\n\n      this.gpuPanel = this.addPanel( new Stats.Panel( 'GPU', '#ff0', '#220' ), 2 );\n\n    }\n\n  }\n\n  begin() {\n\n    this.beginProfiling( 'cpu-started' );\n    if ( ! this.gl || ! this.ext ) return;\n\n\n    if ( this.query ) {\n\n      const available = this.gl.getQueryParameter( this.query, this.gl.QUERY_RESULT_AVAILABLE );\n      this.disjoint = this.gl.getParameter( this.ext.GPU_DISJOINT_EXT );\n\n      if ( available && ! this.disjoint ) {\n\n        this.ns = this.gl.getQueryParameter( this.query, this.gl.QUERY_RESULT );\n        const ms = this.ns * 1e-6;\n\n        if ( available || this.disjoint ) {\n\n          this.gl.deleteQuery( this.query );\n          this.query = null;\n\n        }\n\n        if ( available ) {\n\n          this.addToAverage( ms, this.averageGpu );\n\n        }\n\n      }\n\n    }\n\n    if ( ! this.query ) {\n\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n\n      if ( this.query ) {\n        this.gl.beginQuery( this.ext.TIME_ELAPSED_EXT, this.query );\n      }\n\n    }\n\n  }\n\n  end() {\n\n    this.beginTime = this.endInternal()\n\n    this.endProfiling( 'cpu-started', 'cpu-finished', 'cpu-duration', this.averageCpu );\n\n    if ( ! this.gl || ! this.ext ) return;\n\n\n    if ( this.queryCreated && this.gl.getQuery( this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY ) ) {\n\n      this.gl.endQuery( this.ext.TIME_ELAPSED_EXT );\n\n    }\n\n\n  }\n\n  endInternal() {\n\n    this.frames ++;\n    const time = ( performance || Date ).now();\n\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\n      this.updatePanel( this.msPanel, this.averageCpu );\n      this.updatePanel( this.gpuPanel, this.averageGpu );\n\n      this.prevCpuTime = time;\n    }\n\n    if ( time >= this.prevTime + 1000 ) {\n\n      const fps = ( this.frames * 1000 ) / ( time - this.prevTime );\n\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n\n      this.prevTime = time;\n      this.frames = 0;\n\n    }\n\n    return time;\n\n  }\n\n  addToAverage( value: number, averageArray: { logs: any; graph: any; } ) {\n\n    averageArray.logs.push( value );\n    if ( averageArray.logs.length > this.samplesLog ) {\n\n      averageArray.logs.shift();\n\n    }\n\n    averageArray.graph.push( value );\n    if ( averageArray.graph.length > this.samplesGraph ) {\n\n      averageArray.graph.shift();\n\n    }\n\n  }\n\n  beginProfiling( marker: string ) {\n\n    if ( window.performance ) {\n\n      window.performance.mark( marker );\n\n    }\n\n  }\n\n  endProfiling( startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string, averageArray: {logs: number[], graph: number[]} ) {\n\n    if ( window.performance && endMarker ) {\n\n      window.performance.mark( endMarker );\n      const cpuMeasure = performance.measure( measureName, startMarker, endMarker );\n      this.addToAverage( cpuMeasure.duration, averageArray );\n\n    }\n\n  }\n\n  updatePanel(panel: { update: any; } | null, averageArray: {logs: number[], graph: number[]}) {\n\n    if (averageArray.logs.length > 0) {\n\n      let sumLog = 0;\n      let max = 0.01;\n\n      for (let i = 0; i < averageArray.logs.length; i++) {\n\n        sumLog += averageArray.logs[i];\n\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n\n      }\n\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n\n        sumGraph += averageArray.graph[i];\n\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n\n      }\n\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length,this.samplesLog), sumGraph / Math.min(averageArray.graph.length,this.samplesGraph), max, maxGraph, this.precision);\n      }\n\n    }\n  }\n\n\n}\n\n\nexport default Stats;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}