{"ast":null,"code":"import _classCallCheck from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar Panel = /*#__PURE__*/function () {\n  function Panel(name, fg, bg) {\n    _classCallCheck(this, Panel);\n    this.name = name;\n    this.fg = fg;\n    this.bg = bg;\n    this.PR = Math.round(window.devicePixelRatio || 1);\n    this.WIDTH = 90 * this.PR;\n    this.HEIGHT = 48 * this.PR;\n    this.TEXT_X = 3 * this.PR;\n    this.TEXT_Y = 2 * this.PR;\n    this.GRAPH_X = 3 * this.PR;\n    this.GRAPH_Y = 15 * this.PR;\n    this.GRAPH_WIDTH = 84 * this.PR;\n    this.GRAPH_HEIGHT = 30 * this.PR;\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = 90 * this.PR;\n    this.canvas.height = 48 * this.PR;\n    this.canvas.style.width = \"90px\";\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.height = \"48px\";\n    this.canvas.style.cssText = \"width:90px;height:48px\";\n    this.context = this.canvas.getContext(\"2d\");\n    if (this.context) {\n      this.context.font = \"bold \" + 9 * this.PR + \"px Helvetica,Arial,sans-serif\";\n      this.context.textBaseline = \"top\";\n      this.context.fillStyle = this.bg;\n      this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n      this.context.fillStyle = this.fg;\n      this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n      this.context.fillStyle = this.bg;\n      this.context.globalAlpha = 0.9;\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n    }\n  }\n  _createClass(Panel, [{\n    key: \"update\",\n    value: function update(value, valueGraph, maxValue, maxGraph) {\n      var decimals = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var min = Infinity,\n        max = 0;\n      if (!this.context) return;\n      min = Math.min(min, value);\n      max = Math.max(maxValue, value);\n      maxGraph = Math.max(maxGraph, valueGraph);\n      this.context.fillStyle = this.bg;\n      this.context.globalAlpha = 1;\n      this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n      this.context.fillStyle = this.fg;\n      this.context.fillText(value.toFixed(decimals) + \" \" + this.name + \" (\" + min.toFixed(decimals) + \"-\" + parseFloat(max.toFixed(decimals)) + \")\", this.TEXT_X, this.TEXT_Y);\n      this.context.drawImage(this.canvas, this.GRAPH_X + this.PR, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT, this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT);\n      this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, this.GRAPH_HEIGHT);\n      this.context.fillStyle = this.bg;\n      this.context.globalAlpha = 0.9;\n      this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, (1 - valueGraph / maxGraph) * this.GRAPH_HEIGHT);\n    }\n  }]);\n  return Panel;\n}();\n;\nexport { Panel as default };","map":{"version":3,"names":["Panel","name","fg","bg","_classCallCheck","PR","Math","round","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","document","createElement","width","height","style","position","cssText","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","_createClass","key","value","update","valueGraph","maxValue","maxGraph","decimals","arguments","length","undefined","min","Infinity","max","toFixed","parseFloat","drawImage"],"sources":["C:\\Users\\Dhruv\\OneDrive\\Documents\\GitHub\\new_portfolio\\node_modules\\stats-gl\\lib\\panel.ts"],"sourcesContent":["class Panel {\n    canvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D | null;\n    name: string;\n    fg: string;\n    bg: string;\n    PR: number;\n    WIDTH: number;\n    HEIGHT: number;\n    TEXT_X: number;\n    TEXT_Y: number;\n    GRAPH_X: number;\n    GRAPH_Y: number;\n    GRAPH_WIDTH: number;\n    GRAPH_HEIGHT: number;\n\n    constructor(name: string, fg: string, bg: string) {\n\n        this.name = name;\n        this.fg = fg;\n        this.bg = bg;\n        this.PR = Math.round( window.devicePixelRatio || 1 );\n        \n        this.WIDTH = 90 * this.PR;\n        this.HEIGHT = 48 * this.PR;\n        this.TEXT_X = 3 * this.PR;\n        this.TEXT_Y = 2 * this.PR;\n        this.GRAPH_X = 3 * this.PR;\n        this.GRAPH_Y = 15 * this.PR;\n        this.GRAPH_WIDTH = 84 * this.PR;\n        this.GRAPH_HEIGHT = 30 * this.PR;\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = 90 * this.PR;\n        this.canvas.height = 48 * this.PR;\n        this.canvas.style.width = '90px';\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.height = '48px';\n        this.canvas.style.cssText = 'width:90px;height:48px';\n\n        this.context = this.canvas.getContext('2d');\n\n        if (this.context) {\n            this.context.font = 'bold ' + (9 * this.PR) + 'px Helvetica,Arial,sans-serif';\n            this.context.textBaseline = 'top';\n\n            this.context.fillStyle = this.bg;\n            this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n\n            this.context.fillStyle = this.fg;\n            this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n            this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n\n            this.context.fillStyle = this.bg;\n            this.context.globalAlpha = 0.9;\n            this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n        }\n\n    }\n\n    update(value: number, valueGraph: number, maxValue: number, maxGraph: number, decimals = 0) {\n        let min = Infinity, max = 0;\n\n        if (!this.context) return;\n\n        min = Math.min(min, value);\n        max = Math.max(maxValue, value);\n        maxGraph = Math.max(maxGraph, valueGraph);\n\n        this.context.fillStyle = this.bg;\n        this.context.globalAlpha = 1;\n        this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n        this.context.fillStyle = this.fg;\n        this.context.fillText(value.toFixed(decimals) + ' ' + this.name + ' (' + min.toFixed(decimals) + '-' + parseFloat(max.toFixed(decimals)) + ')', this.TEXT_X, this.TEXT_Y);\n\n        this.context.drawImage(this.canvas, this.GRAPH_X + this.PR, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT, this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT);\n\n        this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, this.GRAPH_HEIGHT);\n\n        this.context.fillStyle = this.bg;\n        this.context.globalAlpha = 0.9;\n\n        this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, ((1 - (valueGraph / maxGraph))) * this.GRAPH_HEIGHT);\n    }\n};\n\nexport default Panel;"],"mappings":";;IAAMA,KAAA;EAgBF,SAAAA,MAAYC,IAAA,EAAcC,EAAA,EAAYC,EAAA,EAAY;IAAAC,eAAA,OAAAJ,KAAA;IAE9C,KAAKC,IAAA,GAAOA,IAAA;IACZ,KAAKC,EAAA,GAAKA,EAAA;IACV,KAAKC,EAAA,GAAKA,EAAA;IACV,KAAKE,EAAA,GAAKC,IAAA,CAAKC,KAAA,CAAOC,MAAA,CAAOC,gBAAA,IAAoB,CAAE;IAE9C,KAAAC,KAAA,GAAQ,KAAK,KAAKL,EAAA;IAClB,KAAAM,MAAA,GAAS,KAAK,KAAKN,EAAA;IACnB,KAAAO,MAAA,GAAS,IAAI,KAAKP,EAAA;IAClB,KAAAQ,MAAA,GAAS,IAAI,KAAKR,EAAA;IAClB,KAAAS,OAAA,GAAU,IAAI,KAAKT,EAAA;IACnB,KAAAU,OAAA,GAAU,KAAK,KAAKV,EAAA;IACpB,KAAAW,WAAA,GAAc,KAAK,KAAKX,EAAA;IACxB,KAAAY,YAAA,GAAe,KAAK,KAAKZ,EAAA;IAEzB,KAAAa,MAAA,GAASC,QAAA,CAASC,aAAA,CAAc,QAAQ;IACxC,KAAAF,MAAA,CAAOG,KAAA,GAAQ,KAAK,KAAKhB,EAAA;IACzB,KAAAa,MAAA,CAAOI,MAAA,GAAS,KAAK,KAAKjB,EAAA;IAC1B,KAAAa,MAAA,CAAOK,KAAA,CAAMF,KAAA,GAAQ;IACrB,KAAAH,MAAA,CAAOK,KAAA,CAAMC,QAAA,GAAW;IACxB,KAAAN,MAAA,CAAOK,KAAA,CAAMD,MAAA,GAAS;IACtB,KAAAJ,MAAA,CAAOK,KAAA,CAAME,OAAA,GAAU;IAE5B,KAAKC,OAAA,GAAU,KAAKR,MAAA,CAAOS,UAAA,CAAW,IAAI;IAE1C,IAAI,KAAKD,OAAA,EAAS;MACd,KAAKA,OAAA,CAAQE,IAAA,GAAO,UAAW,IAAI,KAAKvB,EAAA,GAAM;MAC9C,KAAKqB,OAAA,CAAQG,YAAA,GAAe;MAEvB,KAAAH,OAAA,CAAQI,SAAA,GAAY,KAAK3B,EAAA;MAC9B,KAAKuB,OAAA,CAAQK,QAAA,CAAS,GAAG,GAAG,KAAKrB,KAAA,EAAO,KAAKC,MAAM;MAE9C,KAAAe,OAAA,CAAQI,SAAA,GAAY,KAAK5B,EAAA;MAC9B,KAAKwB,OAAA,CAAQM,QAAA,CAAS,KAAK/B,IAAA,EAAM,KAAKW,MAAA,EAAQ,KAAKC,MAAM;MACpD,KAAAa,OAAA,CAAQK,QAAA,CAAS,KAAKjB,OAAA,EAAS,KAAKC,OAAA,EAAS,KAAKC,WAAA,EAAa,KAAKC,YAAY;MAEhF,KAAAS,OAAA,CAAQI,SAAA,GAAY,KAAK3B,EAAA;MAC9B,KAAKuB,OAAA,CAAQO,WAAA,GAAc;MACtB,KAAAP,OAAA,CAAQK,QAAA,CAAS,KAAKjB,OAAA,EAAS,KAAKC,OAAA,EAAS,KAAKC,WAAA,EAAa,KAAKC,YAAY;IACzF;EAEJ;EAAAiB,YAAA,CAAAlC,KAAA;IAAAmC,GAAA;IAAAC,KAAA,EAEA,SAAAC,OAAOD,KAAA,EAAeE,UAAA,EAAoBC,QAAA,EAAkBC,QAAA,EAAgC;MAAA,IAAdC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAW;MACjF,IAAAG,GAAA,GAAMC,QAAA;QAAUC,GAAA,GAAM;MAE1B,IAAI,CAAC,KAAKrB,OAAA,EAAS;MAEbmB,GAAA,GAAAvC,IAAA,CAAKuC,GAAA,CAAIA,GAAA,EAAKT,KAAK;MACnBW,GAAA,GAAAzC,IAAA,CAAKyC,GAAA,CAAIR,QAAA,EAAUH,KAAK;MACnBI,QAAA,GAAAlC,IAAA,CAAKyC,GAAA,CAAIP,QAAA,EAAUF,UAAU;MAEnC,KAAAZ,OAAA,CAAQI,SAAA,GAAY,KAAK3B,EAAA;MAC9B,KAAKuB,OAAA,CAAQO,WAAA,GAAc;MAC3B,KAAKP,OAAA,CAAQK,QAAA,CAAS,GAAG,GAAG,KAAKrB,KAAA,EAAO,KAAKK,OAAO;MAC/C,KAAAW,OAAA,CAAQI,SAAA,GAAY,KAAK5B,EAAA;MACzB,KAAAwB,OAAA,CAAQM,QAAA,CAASI,KAAA,CAAMY,OAAA,CAAQP,QAAQ,IAAI,MAAM,KAAKxC,IAAA,GAAO,OAAO4C,GAAA,CAAIG,OAAA,CAAQP,QAAQ,IAAI,MAAMQ,UAAA,CAAWF,GAAA,CAAIC,OAAA,CAAQP,QAAQ,CAAC,IAAI,KAAK,KAAK7B,MAAA,EAAQ,KAAKC,MAAM;MAEnK,KAAAa,OAAA,CAAQwB,SAAA,CAAU,KAAKhC,MAAA,EAAQ,KAAKJ,OAAA,GAAU,KAAKT,EAAA,EAAI,KAAKU,OAAA,EAAS,KAAKC,WAAA,GAAc,KAAKX,EAAA,EAAI,KAAKY,YAAA,EAAc,KAAKH,OAAA,EAAS,KAAKC,OAAA,EAAS,KAAKC,WAAA,GAAc,KAAKX,EAAA,EAAI,KAAKY,YAAY;MAElM,KAAKS,OAAA,CAAQK,QAAA,CAAS,KAAKjB,OAAA,GAAU,KAAKE,WAAA,GAAc,KAAKX,EAAA,EAAI,KAAKU,OAAA,EAAS,KAAKV,EAAA,EAAI,KAAKY,YAAY;MAEpG,KAAAS,OAAA,CAAQI,SAAA,GAAY,KAAK3B,EAAA;MAC9B,KAAKuB,OAAA,CAAQO,WAAA,GAAc;MAE3B,KAAKP,OAAA,CAAQK,QAAA,CAAS,KAAKjB,OAAA,GAAU,KAAKE,WAAA,GAAc,KAAKX,EAAA,EAAI,KAAKU,OAAA,EAAS,KAAKV,EAAA,GAAM,IAAKiC,UAAA,GAAaE,QAAA,IAAc,KAAKvB,YAAY;IAC/I;EAAA;EAAA,OAAAjB,KAAA;AAAA;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}