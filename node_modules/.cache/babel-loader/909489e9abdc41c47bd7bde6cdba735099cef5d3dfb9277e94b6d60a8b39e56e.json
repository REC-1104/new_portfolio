{"ast":null,"code":"import _classCallCheck from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DataTexture, FloatType, UnsignedIntType, RGBAFormat, RGIntegerFormat, NearestFilter, BufferAttribute } from 'three';\nimport { FloatVertexAttributeTexture, UIntVertexAttributeTexture } from './VertexAttributeTexture.js';\nimport { BYTES_PER_NODE } from '../core/Constants.js';\nimport { BOUNDING_DATA_INDEX, COUNT, IS_LEAF, RIGHT_NODE, OFFSET, SPLIT_AXIS } from '../core/utils/nodeBufferUtils.js';\nimport { getIndexArray, getVertexCount } from '../core/build/geometryUtils.js';\nexport var MeshBVHUniformStruct = /*#__PURE__*/function () {\n  function MeshBVHUniformStruct() {\n    _classCallCheck(this, MeshBVHUniformStruct);\n    this.index = new UIntVertexAttributeTexture();\n    this.position = new FloatVertexAttributeTexture();\n    this.bvhBounds = new DataTexture();\n    this.bvhContents = new DataTexture();\n    this._cachedIndexAttr = null;\n    this.index.overrideItemSize = 3;\n  }\n  _createClass(MeshBVHUniformStruct, [{\n    key: \"updateFrom\",\n    value: function updateFrom(bvh) {\n      var geometry = bvh.geometry;\n      bvhToTextures(bvh, this.bvhBounds, this.bvhContents);\n      this.position.updateFrom(geometry.attributes.position);\n\n      // dereference a new index attribute if we're using indirect storage\n      if (bvh.indirect) {\n        var indirectBuffer = bvh._indirectBuffer;\n        if (this._cachedIndexAttr === null || this._cachedIndexAttr.count !== indirectBuffer.length) {\n          if (geometry.index) {\n            this._cachedIndexAttr = geometry.index.clone();\n          } else {\n            var array = getIndexArray(getVertexCount(geometry));\n            this._cachedIndexAttr = new BufferAttribute(array, 1, false);\n          }\n        }\n        dereferenceIndex(geometry, indirectBuffer, this._cachedIndexAttr);\n        this.index.updateFrom(this._cachedIndexAttr);\n      } else {\n        this.index.updateFrom(geometry.index);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var index = this.index,\n        position = this.position,\n        bvhBounds = this.bvhBounds,\n        bvhContents = this.bvhContents;\n      if (index) index.dispose();\n      if (position) position.dispose();\n      if (bvhBounds) bvhBounds.dispose();\n      if (bvhContents) bvhContents.dispose();\n    }\n  }]);\n  return MeshBVHUniformStruct;\n}();\nfunction dereferenceIndex(geometry, indirectBuffer, target) {\n  var unpacked = target.array;\n  var indexArray = geometry.index ? geometry.index.array : null;\n  for (var i = 0, l = indirectBuffer.length; i < l; i++) {\n    var i3 = 3 * i;\n    var v3 = 3 * indirectBuffer[i];\n    for (var c = 0; c < 3; c++) {\n      unpacked[i3 + c] = indexArray ? indexArray[v3 + c] : v3 + c;\n    }\n  }\n}\nfunction bvhToTextures(bvh, boundsTexture, contentsTexture) {\n  var roots = bvh._roots;\n  if (roots.length !== 1) {\n    throw new Error('MeshBVHUniformStruct: Multi-root BVHs not supported.');\n  }\n  var root = roots[0];\n  var uint16Array = new Uint16Array(root);\n  var uint32Array = new Uint32Array(root);\n  var float32Array = new Float32Array(root);\n\n  // Both bounds need two elements per node so compute the height so it's twice as long as\n  // the width so we can expand the row by two and still have a square texture\n  var nodeCount = root.byteLength / BYTES_PER_NODE;\n  var boundsDimension = 2 * Math.ceil(Math.sqrt(nodeCount / 2));\n  var boundsArray = new Float32Array(4 * boundsDimension * boundsDimension);\n  var contentsDimension = Math.ceil(Math.sqrt(nodeCount));\n  var contentsArray = new Uint32Array(2 * contentsDimension * contentsDimension);\n  for (var i = 0; i < nodeCount; i++) {\n    var nodeIndex32 = i * BYTES_PER_NODE / 4;\n    var nodeIndex16 = nodeIndex32 * 2;\n    var boundsIndex = BOUNDING_DATA_INDEX(nodeIndex32);\n    for (var b = 0; b < 3; b++) {\n      boundsArray[8 * i + 0 + b] = float32Array[boundsIndex + 0 + b];\n      boundsArray[8 * i + 4 + b] = float32Array[boundsIndex + 3 + b];\n    }\n    if (IS_LEAF(nodeIndex16, uint16Array)) {\n      var count = COUNT(nodeIndex16, uint16Array);\n      var offset = OFFSET(nodeIndex32, uint32Array);\n      var mergedLeafCount = 0xffff0000 | count;\n      contentsArray[i * 2 + 0] = mergedLeafCount;\n      contentsArray[i * 2 + 1] = offset;\n    } else {\n      var rightIndex = 4 * RIGHT_NODE(nodeIndex32, uint32Array) / BYTES_PER_NODE;\n      var splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);\n      contentsArray[i * 2 + 0] = splitAxis;\n      contentsArray[i * 2 + 1] = rightIndex;\n    }\n  }\n  boundsTexture.image.data = boundsArray;\n  boundsTexture.image.width = boundsDimension;\n  boundsTexture.image.height = boundsDimension;\n  boundsTexture.format = RGBAFormat;\n  boundsTexture.type = FloatType;\n  boundsTexture.internalFormat = 'RGBA32F';\n  boundsTexture.minFilter = NearestFilter;\n  boundsTexture.magFilter = NearestFilter;\n  boundsTexture.generateMipmaps = false;\n  boundsTexture.needsUpdate = true;\n  boundsTexture.dispose();\n  contentsTexture.image.data = contentsArray;\n  contentsTexture.image.width = contentsDimension;\n  contentsTexture.image.height = contentsDimension;\n  contentsTexture.format = RGIntegerFormat;\n  contentsTexture.type = UnsignedIntType;\n  contentsTexture.internalFormat = 'RG32UI';\n  contentsTexture.minFilter = NearestFilter;\n  contentsTexture.magFilter = NearestFilter;\n  contentsTexture.generateMipmaps = false;\n  contentsTexture.needsUpdate = true;\n  contentsTexture.dispose();\n}","map":{"version":3,"names":["DataTexture","FloatType","UnsignedIntType","RGBAFormat","RGIntegerFormat","NearestFilter","BufferAttribute","FloatVertexAttributeTexture","UIntVertexAttributeTexture","BYTES_PER_NODE","BOUNDING_DATA_INDEX","COUNT","IS_LEAF","RIGHT_NODE","OFFSET","SPLIT_AXIS","getIndexArray","getVertexCount","MeshBVHUniformStruct","_classCallCheck","index","position","bvhBounds","bvhContents","_cachedIndexAttr","overrideItemSize","_createClass","key","value","updateFrom","bvh","geometry","bvhToTextures","attributes","indirect","indirectBuffer","_indirectBuffer","count","length","clone","array","dereferenceIndex","dispose","target","unpacked","indexArray","i","l","i3","v3","c","boundsTexture","contentsTexture","roots","_roots","Error","root","uint16Array","Uint16Array","uint32Array","Uint32Array","float32Array","Float32Array","nodeCount","byteLength","boundsDimension","Math","ceil","sqrt","boundsArray","contentsDimension","contentsArray","nodeIndex32","nodeIndex16","boundsIndex","b","offset","mergedLeafCount","rightIndex","splitAxis","image","data","width","height","format","type","internalFormat","minFilter","magFilter","generateMipmaps","needsUpdate"],"sources":["C:/Users/Dhruv/OneDrive/Documents/GitHub/new_portfolio/node_modules/three-mesh-bvh/src/gpu/MeshBVHUniformStruct.js"],"sourcesContent":["import {\n\tDataTexture,\n\tFloatType,\n\tUnsignedIntType,\n\tRGBAFormat,\n\tRGIntegerFormat,\n\tNearestFilter,\n\tBufferAttribute,\n} from 'three';\nimport {\n\tFloatVertexAttributeTexture,\n\tUIntVertexAttributeTexture,\n} from './VertexAttributeTexture.js';\nimport { BYTES_PER_NODE } from '../core/Constants.js';\nimport {\n\tBOUNDING_DATA_INDEX,\n\tCOUNT,\n\tIS_LEAF,\n\tRIGHT_NODE,\n\tOFFSET,\n\tSPLIT_AXIS,\n} from '../core/utils/nodeBufferUtils.js';\nimport { getIndexArray, getVertexCount } from '../core/build/geometryUtils.js';\n\nexport class MeshBVHUniformStruct {\n\n\tconstructor() {\n\n\t\tthis.index = new UIntVertexAttributeTexture();\n\t\tthis.position = new FloatVertexAttributeTexture();\n\t\tthis.bvhBounds = new DataTexture();\n\t\tthis.bvhContents = new DataTexture();\n\t\tthis._cachedIndexAttr = null;\n\n\t\tthis.index.overrideItemSize = 3;\n\n\t}\n\n\tupdateFrom( bvh ) {\n\n\t\tconst { geometry } = bvh;\n\t\tbvhToTextures( bvh, this.bvhBounds, this.bvhContents );\n\n\t\tthis.position.updateFrom( geometry.attributes.position );\n\n\t\t// dereference a new index attribute if we're using indirect storage\n\t\tif ( bvh.indirect ) {\n\n\t\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\t\tif (\n\t\t\t\tthis._cachedIndexAttr === null ||\n\t\t\t\tthis._cachedIndexAttr.count !== indirectBuffer.length\n\t\t\t) {\n\n\t\t\t\tif ( geometry.index ) {\n\n\t\t\t\t\tthis._cachedIndexAttr = geometry.index.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst array = getIndexArray( getVertexCount( geometry ) );\n\t\t\t\t\tthis._cachedIndexAttr = new BufferAttribute( array, 1, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdereferenceIndex( geometry, indirectBuffer, this._cachedIndexAttr );\n\t\t\tthis.index.updateFrom( this._cachedIndexAttr );\n\n\t\t} else {\n\n\t\t\tthis.index.updateFrom( geometry.index );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tconst { index, position, bvhBounds, bvhContents } = this;\n\n\t\tif ( index ) index.dispose();\n\t\tif ( position ) position.dispose();\n\t\tif ( bvhBounds ) bvhBounds.dispose();\n\t\tif ( bvhContents ) bvhContents.dispose();\n\n\t}\n\n}\n\nfunction dereferenceIndex( geometry, indirectBuffer, target ) {\n\n\tconst unpacked = target.array;\n\tconst indexArray = geometry.index ? geometry.index.array : null;\n\tfor ( let i = 0, l = indirectBuffer.length; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst v3 = 3 * indirectBuffer[ i ];\n\t\tfor ( let c = 0; c < 3; c ++ ) {\n\n\t\t\tunpacked[ i3 + c ] = indexArray ? indexArray[ v3 + c ] : v3 + c;\n\n\t\t}\n\n\t}\n\n}\n\nfunction bvhToTextures( bvh, boundsTexture, contentsTexture ) {\n\n\tconst roots = bvh._roots;\n\n\tif ( roots.length !== 1 ) {\n\n\t\tthrow new Error( 'MeshBVHUniformStruct: Multi-root BVHs not supported.' );\n\n\t}\n\n\tconst root = roots[ 0 ];\n\tconst uint16Array = new Uint16Array( root );\n\tconst uint32Array = new Uint32Array( root );\n\tconst float32Array = new Float32Array( root );\n\n\t// Both bounds need two elements per node so compute the height so it's twice as long as\n\t// the width so we can expand the row by two and still have a square texture\n\tconst nodeCount = root.byteLength / BYTES_PER_NODE;\n\tconst boundsDimension = 2 * Math.ceil( Math.sqrt( nodeCount / 2 ) );\n\tconst boundsArray = new Float32Array( 4 * boundsDimension * boundsDimension );\n\n\tconst contentsDimension = Math.ceil( Math.sqrt( nodeCount ) );\n\tconst contentsArray = new Uint32Array( 2 * contentsDimension * contentsDimension );\n\n\tfor ( let i = 0; i < nodeCount; i ++ ) {\n\n\t\tconst nodeIndex32 = i * BYTES_PER_NODE / 4;\n\t\tconst nodeIndex16 = nodeIndex32 * 2;\n\t\tconst boundsIndex = BOUNDING_DATA_INDEX( nodeIndex32 );\n\t\tfor ( let b = 0; b < 3; b ++ ) {\n\n\t\t\tboundsArray[ 8 * i + 0 + b ] = float32Array[ boundsIndex + 0 + b ];\n\t\t\tboundsArray[ 8 * i + 4 + b ] = float32Array[ boundsIndex + 3 + b ];\n\n\t\t}\n\n\t\tif ( IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\n\t\t\tconst mergedLeafCount = 0xffff0000 | count;\n\t\t\tcontentsArray[ i * 2 + 0 ] = mergedLeafCount;\n\t\t\tcontentsArray[ i * 2 + 1 ] = offset;\n\n\t\t} else {\n\n\t\t\tconst rightIndex = 4 * RIGHT_NODE( nodeIndex32, uint32Array ) / BYTES_PER_NODE;\n\t\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\n\t\t\tcontentsArray[ i * 2 + 0 ] = splitAxis;\n\t\t\tcontentsArray[ i * 2 + 1 ] = rightIndex;\n\n\t\t}\n\n\t}\n\n\tboundsTexture.image.data = boundsArray;\n\tboundsTexture.image.width = boundsDimension;\n\tboundsTexture.image.height = boundsDimension;\n\tboundsTexture.format = RGBAFormat;\n\tboundsTexture.type = FloatType;\n\tboundsTexture.internalFormat = 'RGBA32F';\n\tboundsTexture.minFilter = NearestFilter;\n\tboundsTexture.magFilter = NearestFilter;\n\tboundsTexture.generateMipmaps = false;\n\tboundsTexture.needsUpdate = true;\n\tboundsTexture.dispose();\n\n\tcontentsTexture.image.data = contentsArray;\n\tcontentsTexture.image.width = contentsDimension;\n\tcontentsTexture.image.height = contentsDimension;\n\tcontentsTexture.format = RGIntegerFormat;\n\tcontentsTexture.type = UnsignedIntType;\n\tcontentsTexture.internalFormat = 'RG32UI';\n\tcontentsTexture.minFilter = NearestFilter;\n\tcontentsTexture.magFilter = NearestFilter;\n\tcontentsTexture.generateMipmaps = false;\n\tcontentsTexture.needsUpdate = true;\n\tcontentsTexture.dispose();\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}